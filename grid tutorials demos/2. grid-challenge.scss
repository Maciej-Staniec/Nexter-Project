*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

html {
  font-size: 62.5%;
  box-sizing: border-box;
  overflow-x: hidden;
}

body {
  overflow: inherit;
  font-size: 3rem;
  font-family: sans-serif;
}

// ****************************
// Styling grid using track numbers
// ****************************

// .container {
//   display: grid;
//   padding: 3.2rem;
//   color: white;
//   gap: 3.2rem;
//   grid-template-columns: repeat(3, 1fr) minmax(15rem, 25rem);
//   grid-template-rows: 10rem 20rem 40rem 10rem;

//   // Select all child elements
//   & > * {
//     background-color: red;
//     padding: 3.2rem;
//   }
// }

// .header {
//   grid-column: 1 / -1;
// }

// .main {
//   grid-column: 1/ -2;
// }

// .sidebar {
//   grid-row: 2 / span 2;
//   grid-column: -1 / -2;
// }

// .footer {
//   grid-column: 1 / -1;
// }

// ****************************
// Designing grid using track naming technique
// ****************************

// .container {
//   display: grid;
//   padding: 3.2rem;
//   color: white;
//   gap: 3.2rem;
//   // Naming each column track. They can have multiple names. If we use repeat function the naming causes conflict and it automatically creates varations (like col-start 1 col-end 1, col-start 2 col-end 2 and so on)
//   grid-template-columns:
//     repeat(3, [col-start] 1fr [col-end]) minmax(15rem, 25rem)
//     [grid-end];

//   // Naming each row track. They can have multiple names.
//   grid-template-rows: [header-start]10rem [header-end box-start]20rem [box-end main-start] 40rem [main-end footer-start] 10rem [footer-end];

//   // Select all child elements
//   & > * {
//     background-color: red;
//     padding: 3.2rem;
//   }
// }

// .header {
//   grid-column: col-start 1 / grid-end;
// }

// .main {
//   grid-column: col-start 1 / col-end 3;
// }

// .sidebar {
//   grid-row: box-start / main-end;
//   grid-column: col-end 3 / grid-end;
// }

// .footer {
//   grid-column: col-start 1 / grid-end;
// }

// ****************************
// Designing grid using grid-template-area property
// ****************************
.container {
  display: grid;
  padding: 3.2rem;
  color: white;
  gap: 3.2rem;
  grid-template-columns: repeat(3, 1fr) minmax(15rem, 25rem);
  grid-template-rows: 10rem 20rem 40rem 10rem;

  grid-template-areas:
    "head head head head"
    "box-1 box-2 box-3 side"
    "main main main side"
    "foot foot foot foot";

  // if you want a cell to be empty, just place "." in the corresponding column.
  grid-template-areas:
    ". head head ."
    "box-1 box-2 box-3 side"
    "main main main side"
    ". foot foot .";

  // Select all child elements
  & > * {
    background-color: red;
    padding: 3.2rem;
  }
}

.header {
  grid-area: head;
}

.box-1 {
  grid-area: box-1;
}
.box-2 {
  grid-area: box-2;
}
.box-3 {
  grid-area: box-3;
}
.main {
  grid-area: main;
}

.sidebar {
  grid-area: side;
}

.footer {
  grid-area: foot;
}
